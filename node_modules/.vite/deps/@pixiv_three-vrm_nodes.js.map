{
  "version": 3,
  "sources": ["../../three/build/three.tsl.js", "../../@pixiv/three-vrm-materials-mtoon/src/nodes/warningIfPre161.ts", "../../@pixiv/three-vrm-materials-mtoon/src/nodes/MToonAnimatedUVNode.ts", "../../@pixiv/three-vrm-materials-mtoon/src/nodes/materialReferences.ts", "../../@pixiv/three-vrm-materials-mtoon/src/nodes/MToonLightingModel.ts", "../../@pixiv/three-vrm-materials-mtoon/src/nodes/immutableNodes.ts", "../../@pixiv/three-vrm-materials-mtoon/src/nodes/utils/FnCompat.ts", "../../@pixiv/three-vrm-materials-mtoon/src/nodes/MToonNodeMaterial.ts", "../../@pixiv/three-vrm-materials-mtoon/src/MToonMaterialOutlineWidthMode.ts", "../../@pixiv/three-vrm-materials-mtoon/src/nodes/mtoonParametricRim.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2010-2025 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\nimport { TSL } from 'three/webgpu';\n\nconst BRDF_GGX = TSL.BRDF_GGX;\nconst BRDF_Lambert = TSL.BRDF_Lambert;\nconst BasicShadowFilter = TSL.BasicShadowFilter;\nconst Break = TSL.Break;\nconst Continue = TSL.Continue;\nconst DFGApprox = TSL.DFGApprox;\nconst D_GGX = TSL.D_GGX;\nconst Discard = TSL.Discard;\nconst EPSILON = TSL.EPSILON;\nconst F_Schlick = TSL.F_Schlick;\nconst Fn = TSL.Fn;\nconst INFINITY = TSL.INFINITY;\nconst If = TSL.If;\nconst Switch = TSL.Switch;\nconst Loop = TSL.Loop;\nconst NodeShaderStage = TSL.NodeShaderStage;\nconst NodeType = TSL.NodeType;\nconst NodeUpdateType = TSL.NodeUpdateType;\nconst NodeAccess = TSL.NodeAccess;\nconst PCFShadowFilter = TSL.PCFShadowFilter;\nconst PCFSoftShadowFilter = TSL.PCFSoftShadowFilter;\nconst PI = TSL.PI;\nconst PI2 = TSL.PI2;\nconst Return = TSL.Return;\nconst Schlick_to_F0 = TSL.Schlick_to_F0;\nconst ScriptableNodeResources = TSL.ScriptableNodeResources;\nconst ShaderNode = TSL.ShaderNode;\nconst TBNViewMatrix = TSL.TBNViewMatrix;\nconst VSMShadowFilter = TSL.VSMShadowFilter;\nconst V_GGX_SmithCorrelated = TSL.V_GGX_SmithCorrelated;\nconst abs = TSL.abs;\nconst acesFilmicToneMapping = TSL.acesFilmicToneMapping;\nconst acos = TSL.acos;\nconst add = TSL.add;\nconst addNodeElement = TSL.addNodeElement;\nconst agxToneMapping = TSL.agxToneMapping;\nconst all = TSL.all;\nconst alphaT = TSL.alphaT;\nconst and = TSL.and;\nconst anisotropy = TSL.anisotropy;\nconst anisotropyB = TSL.anisotropyB;\nconst anisotropyT = TSL.anisotropyT;\nconst any = TSL.any;\nconst append = TSL.append;\nconst array = TSL.array;\nconst arrayBuffer = TSL.arrayBuffer;\nconst asin = TSL.asin;\nconst assign = TSL.assign;\nconst atan = TSL.atan;\nconst atan2 = TSL.atan2;\nconst atomicAdd = TSL.atomicAdd;\nconst atomicAnd = TSL.atomicAnd;\nconst atomicFunc = TSL.atomicFunc;\nconst atomicMax = TSL.atomicMax;\nconst atomicMin = TSL.atomicMin;\nconst atomicOr = TSL.atomicOr;\nconst atomicStore = TSL.atomicStore;\nconst atomicSub = TSL.atomicSub;\nconst atomicXor = TSL.atomicXor;\nconst atomicLoad = TSL.atomicLoad;\nconst attenuationColor = TSL.attenuationColor;\nconst attenuationDistance = TSL.attenuationDistance;\nconst attribute = TSL.attribute;\nconst attributeArray = TSL.attributeArray;\nconst backgroundBlurriness = TSL.backgroundBlurriness;\nconst backgroundIntensity = TSL.backgroundIntensity;\nconst backgroundRotation = TSL.backgroundRotation;\nconst batch = TSL.batch;\nconst bentNormalView = TSL.bentNormalView;\nconst billboarding = TSL.billboarding;\nconst bitAnd = TSL.bitAnd;\nconst bitNot = TSL.bitNot;\nconst bitOr = TSL.bitOr;\nconst bitXor = TSL.bitXor;\nconst bitangentGeometry = TSL.bitangentGeometry;\nconst bitangentLocal = TSL.bitangentLocal;\nconst bitangentView = TSL.bitangentView;\nconst bitangentWorld = TSL.bitangentWorld;\nconst bitcast = TSL.bitcast;\nconst blendBurn = TSL.blendBurn;\nconst blendColor = TSL.blendColor;\nconst blendDodge = TSL.blendDodge;\nconst blendOverlay = TSL.blendOverlay;\nconst blendScreen = TSL.blendScreen;\nconst blur = TSL.blur;\nconst bool = TSL.bool;\nconst buffer = TSL.buffer;\nconst bufferAttribute = TSL.bufferAttribute;\nconst bumpMap = TSL.bumpMap;\nconst burn = TSL.burn;\nconst bvec2 = TSL.bvec2;\nconst bvec3 = TSL.bvec3;\nconst bvec4 = TSL.bvec4;\nconst bypass = TSL.bypass;\nconst cache = TSL.cache;\nconst call = TSL.call;\nconst cameraFar = TSL.cameraFar;\nconst cameraIndex = TSL.cameraIndex;\nconst cameraNear = TSL.cameraNear;\nconst cameraNormalMatrix = TSL.cameraNormalMatrix;\nconst cameraPosition = TSL.cameraPosition;\nconst cameraProjectionMatrix = TSL.cameraProjectionMatrix;\nconst cameraProjectionMatrixInverse = TSL.cameraProjectionMatrixInverse;\nconst cameraViewMatrix = TSL.cameraViewMatrix;\nconst cameraWorldMatrix = TSL.cameraWorldMatrix;\nconst cbrt = TSL.cbrt;\nconst cdl = TSL.cdl;\nconst ceil = TSL.ceil;\nconst checker = TSL.checker;\nconst cineonToneMapping = TSL.cineonToneMapping;\nconst clamp = TSL.clamp;\nconst clearcoat = TSL.clearcoat;\nconst clearcoatRoughness = TSL.clearcoatRoughness;\nconst code = TSL.code;\nconst color = TSL.color;\nconst colorSpaceToWorking = TSL.colorSpaceToWorking;\nconst colorToDirection = TSL.colorToDirection;\nconst compute = TSL.compute;\nconst computeSkinning = TSL.computeSkinning;\nconst cond = TSL.cond;\nconst Const = TSL.Const;\nconst context = TSL.context;\nconst convert = TSL.convert;\nconst convertColorSpace = TSL.convertColorSpace;\nconst convertToTexture = TSL.convertToTexture;\nconst cos = TSL.cos;\nconst cross = TSL.cross;\nconst cubeTexture = TSL.cubeTexture;\nconst dFdx = TSL.dFdx;\nconst dFdy = TSL.dFdy;\nconst dashSize = TSL.dashSize;\nconst debug = TSL.debug;\nconst decrement = TSL.decrement;\nconst decrementBefore = TSL.decrementBefore;\nconst defaultBuildStages = TSL.defaultBuildStages;\nconst defaultShaderStages = TSL.defaultShaderStages;\nconst defined = TSL.defined;\nconst degrees = TSL.degrees;\nconst deltaTime = TSL.deltaTime;\nconst densityFog = TSL.densityFog;\nconst densityFogFactor = TSL.densityFogFactor;\nconst depth = TSL.depth;\nconst depthPass = TSL.depthPass;\nconst difference = TSL.difference;\nconst diffuseColor = TSL.diffuseColor;\nconst directPointLight = TSL.directPointLight;\nconst directionToColor = TSL.directionToColor;\nconst dispersion = TSL.dispersion;\nconst distance = TSL.distance;\nconst div = TSL.div;\nconst dodge = TSL.dodge;\nconst dot = TSL.dot;\nconst drawIndex = TSL.drawIndex;\nconst dynamicBufferAttribute = TSL.dynamicBufferAttribute;\nconst element = TSL.element;\nconst emissive = TSL.emissive;\nconst equal = TSL.equal;\nconst equals = TSL.equals;\nconst equirectUV = TSL.equirectUV;\nconst exp = TSL.exp;\nconst exp2 = TSL.exp2;\nconst expression = TSL.expression;\nconst faceDirection = TSL.faceDirection;\nconst faceForward = TSL.faceForward;\nconst faceforward = TSL.faceforward;\nconst float = TSL.float;\nconst floor = TSL.floor;\nconst fog = TSL.fog;\nconst fract = TSL.fract;\nconst frameGroup = TSL.frameGroup;\nconst frameId = TSL.frameId;\nconst frontFacing = TSL.frontFacing;\nconst fwidth = TSL.fwidth;\nconst gain = TSL.gain;\nconst gapSize = TSL.gapSize;\nconst getConstNodeType = TSL.getConstNodeType;\nconst getCurrentStack = TSL.getCurrentStack;\nconst getDirection = TSL.getDirection;\nconst getDistanceAttenuation = TSL.getDistanceAttenuation;\nconst getGeometryRoughness = TSL.getGeometryRoughness;\nconst getNormalFromDepth = TSL.getNormalFromDepth;\nconst getParallaxCorrectNormal = TSL.getParallaxCorrectNormal;\nconst getRoughness = TSL.getRoughness;\nconst getScreenPosition = TSL.getScreenPosition;\nconst getShIrradianceAt = TSL.getShIrradianceAt;\nconst getTextureIndex = TSL.getTextureIndex;\nconst getViewPosition = TSL.getViewPosition;\nconst getShadowMaterial = TSL.getShadowMaterial;\nconst getShadowRenderObjectFunction = TSL.getShadowRenderObjectFunction;\nconst glsl = TSL.glsl;\nconst glslFn = TSL.glslFn;\nconst grayscale = TSL.grayscale;\nconst greaterThan = TSL.greaterThan;\nconst greaterThanEqual = TSL.greaterThanEqual;\nconst hash = TSL.hash;\nconst highpModelNormalViewMatrix = TSL.highpModelNormalViewMatrix;\nconst highpModelViewMatrix = TSL.highpModelViewMatrix;\nconst hue = TSL.hue;\nconst increment = TSL.increment;\nconst incrementBefore = TSL.incrementBefore;\nconst instance = TSL.instance;\nconst instanceIndex = TSL.instanceIndex;\nconst instancedArray = TSL.instancedArray;\nconst instancedBufferAttribute = TSL.instancedBufferAttribute;\nconst instancedDynamicBufferAttribute = TSL.instancedDynamicBufferAttribute;\nconst instancedMesh = TSL.instancedMesh;\nconst int = TSL.int;\nconst inverseSqrt = TSL.inverseSqrt;\nconst inversesqrt = TSL.inversesqrt;\nconst invocationLocalIndex = TSL.invocationLocalIndex;\nconst invocationSubgroupIndex = TSL.invocationSubgroupIndex;\nconst ior = TSL.ior;\nconst iridescence = TSL.iridescence;\nconst iridescenceIOR = TSL.iridescenceIOR;\nconst iridescenceThickness = TSL.iridescenceThickness;\nconst ivec2 = TSL.ivec2;\nconst ivec3 = TSL.ivec3;\nconst ivec4 = TSL.ivec4;\nconst js = TSL.js;\nconst label = TSL.label;\nconst length = TSL.length;\nconst lengthSq = TSL.lengthSq;\nconst lessThan = TSL.lessThan;\nconst lessThanEqual = TSL.lessThanEqual;\nconst lightPosition = TSL.lightPosition;\nconst lightShadowMatrix = TSL.lightShadowMatrix;\nconst lightTargetDirection = TSL.lightTargetDirection;\nconst lightTargetPosition = TSL.lightTargetPosition;\nconst lightViewPosition = TSL.lightViewPosition;\nconst lightingContext = TSL.lightingContext;\nconst lights = TSL.lights;\nconst linearDepth = TSL.linearDepth;\nconst linearToneMapping = TSL.linearToneMapping;\nconst localId = TSL.localId;\nconst globalId = TSL.globalId;\nconst log = TSL.log;\nconst log2 = TSL.log2;\nconst logarithmicDepthToViewZ = TSL.logarithmicDepthToViewZ;\nconst loop = TSL.loop;\nconst luminance = TSL.luminance;\nconst mediumpModelViewMatrix = TSL.mediumpModelViewMatrix;\nconst mat2 = TSL.mat2;\nconst mat3 = TSL.mat3;\nconst mat4 = TSL.mat4;\nconst matcapUV = TSL.matcapUV;\nconst materialAO = TSL.materialAO;\nconst materialAlphaTest = TSL.materialAlphaTest;\nconst materialAnisotropy = TSL.materialAnisotropy;\nconst materialAnisotropyVector = TSL.materialAnisotropyVector;\nconst materialAttenuationColor = TSL.materialAttenuationColor;\nconst materialAttenuationDistance = TSL.materialAttenuationDistance;\nconst materialClearcoat = TSL.materialClearcoat;\nconst materialClearcoatNormal = TSL.materialClearcoatNormal;\nconst materialClearcoatRoughness = TSL.materialClearcoatRoughness;\nconst materialColor = TSL.materialColor;\nconst materialDispersion = TSL.materialDispersion;\nconst materialEmissive = TSL.materialEmissive;\nconst materialIOR = TSL.materialIOR;\nconst materialIridescence = TSL.materialIridescence;\nconst materialIridescenceIOR = TSL.materialIridescenceIOR;\nconst materialIridescenceThickness = TSL.materialIridescenceThickness;\nconst materialLightMap = TSL.materialLightMap;\nconst materialLineDashOffset = TSL.materialLineDashOffset;\nconst materialLineDashSize = TSL.materialLineDashSize;\nconst materialLineGapSize = TSL.materialLineGapSize;\nconst materialLineScale = TSL.materialLineScale;\nconst materialLineWidth = TSL.materialLineWidth;\nconst materialMetalness = TSL.materialMetalness;\nconst materialNormal = TSL.materialNormal;\nconst materialOpacity = TSL.materialOpacity;\nconst materialPointSize = TSL.materialPointSize;\nconst materialReference = TSL.materialReference;\nconst materialReflectivity = TSL.materialReflectivity;\nconst materialRefractionRatio = TSL.materialRefractionRatio;\nconst materialRotation = TSL.materialRotation;\nconst materialRoughness = TSL.materialRoughness;\nconst materialSheen = TSL.materialSheen;\nconst materialSheenRoughness = TSL.materialSheenRoughness;\nconst materialShininess = TSL.materialShininess;\nconst materialSpecular = TSL.materialSpecular;\nconst materialSpecularColor = TSL.materialSpecularColor;\nconst materialSpecularIntensity = TSL.materialSpecularIntensity;\nconst materialSpecularStrength = TSL.materialSpecularStrength;\nconst materialThickness = TSL.materialThickness;\nconst materialTransmission = TSL.materialTransmission;\nconst max = TSL.max;\nconst maxMipLevel = TSL.maxMipLevel;\nconst metalness = TSL.metalness;\nconst min = TSL.min;\nconst mix = TSL.mix;\nconst mixElement = TSL.mixElement;\nconst mod = TSL.mod;\nconst modInt = TSL.modInt;\nconst modelDirection = TSL.modelDirection;\nconst modelNormalMatrix = TSL.modelNormalMatrix;\nconst modelPosition = TSL.modelPosition;\nconst modelRadius = TSL.modelRadius;\nconst modelScale = TSL.modelScale;\nconst modelViewMatrix = TSL.modelViewMatrix;\nconst modelViewPosition = TSL.modelViewPosition;\nconst modelViewProjection = TSL.modelViewProjection;\nconst modelWorldMatrix = TSL.modelWorldMatrix;\nconst modelWorldMatrixInverse = TSL.modelWorldMatrixInverse;\nconst morphReference = TSL.morphReference;\nconst mrt = TSL.mrt;\nconst mul = TSL.mul;\nconst mx_aastep = TSL.mx_aastep;\nconst mx_cell_noise_float = TSL.mx_cell_noise_float;\nconst mx_contrast = TSL.mx_contrast;\nconst mx_fractal_noise_float = TSL.mx_fractal_noise_float;\nconst mx_fractal_noise_vec2 = TSL.mx_fractal_noise_vec2;\nconst mx_fractal_noise_vec3 = TSL.mx_fractal_noise_vec3;\nconst mx_fractal_noise_vec4 = TSL.mx_fractal_noise_vec4;\nconst mx_hsvtorgb = TSL.mx_hsvtorgb;\nconst mx_noise_float = TSL.mx_noise_float;\nconst mx_noise_vec3 = TSL.mx_noise_vec3;\nconst mx_noise_vec4 = TSL.mx_noise_vec4;\nconst mx_ramplr = TSL.mx_ramplr;\nconst mx_ramptb = TSL.mx_ramptb;\nconst mx_rgbtohsv = TSL.mx_rgbtohsv;\nconst mx_safepower = TSL.mx_safepower;\nconst mx_splitlr = TSL.mx_splitlr;\nconst mx_splittb = TSL.mx_splittb;\nconst mx_srgb_texture_to_lin_rec709 = TSL.mx_srgb_texture_to_lin_rec709;\nconst mx_transform_uv = TSL.mx_transform_uv;\nconst mx_worley_noise_float = TSL.mx_worley_noise_float;\nconst mx_worley_noise_vec2 = TSL.mx_worley_noise_vec2;\nconst mx_worley_noise_vec3 = TSL.mx_worley_noise_vec3;\nconst negate = TSL.negate;\nconst neutralToneMapping = TSL.neutralToneMapping;\nconst nodeArray = TSL.nodeArray;\nconst nodeImmutable = TSL.nodeImmutable;\nconst nodeObject = TSL.nodeObject;\nconst nodeObjects = TSL.nodeObjects;\nconst nodeProxy = TSL.nodeProxy;\nconst normalFlat = TSL.normalFlat;\nconst normalGeometry = TSL.normalGeometry;\nconst normalLocal = TSL.normalLocal;\nconst normalMap = TSL.normalMap;\nconst normalView = TSL.normalView;\nconst normalViewGeometry = TSL.normalViewGeometry;\nconst normalWorld = TSL.normalWorld;\nconst normalWorldGeometry = TSL.normalWorldGeometry;\nconst normalize = TSL.normalize;\nconst not = TSL.not;\nconst notEqual = TSL.notEqual;\nconst numWorkgroups = TSL.numWorkgroups;\nconst objectDirection = TSL.objectDirection;\nconst objectGroup = TSL.objectGroup;\nconst objectPosition = TSL.objectPosition;\nconst objectRadius = TSL.objectRadius;\nconst objectScale = TSL.objectScale;\nconst objectViewPosition = TSL.objectViewPosition;\nconst objectWorldMatrix = TSL.objectWorldMatrix;\nconst oneMinus = TSL.oneMinus;\nconst or = TSL.or;\nconst orthographicDepthToViewZ = TSL.orthographicDepthToViewZ;\nconst oscSawtooth = TSL.oscSawtooth;\nconst oscSine = TSL.oscSine;\nconst oscSquare = TSL.oscSquare;\nconst oscTriangle = TSL.oscTriangle;\nconst output = TSL.output;\nconst outputStruct = TSL.outputStruct;\nconst overlay = TSL.overlay;\nconst overloadingFn = TSL.overloadingFn;\nconst parabola = TSL.parabola;\nconst parallaxDirection = TSL.parallaxDirection;\nconst parallaxUV = TSL.parallaxUV;\nconst parameter = TSL.parameter;\nconst pass = TSL.pass;\nconst passTexture = TSL.passTexture;\nconst pcurve = TSL.pcurve;\nconst perspectiveDepthToViewZ = TSL.perspectiveDepthToViewZ;\nconst pmremTexture = TSL.pmremTexture;\nconst pointUV = TSL.pointUV;\nconst pointWidth = TSL.pointWidth;\nconst positionGeometry = TSL.positionGeometry;\nconst positionLocal = TSL.positionLocal;\nconst positionPrevious = TSL.positionPrevious;\nconst positionView = TSL.positionView;\nconst positionViewDirection = TSL.positionViewDirection;\nconst positionWorld = TSL.positionWorld;\nconst positionWorldDirection = TSL.positionWorldDirection;\nconst posterize = TSL.posterize;\nconst pow = TSL.pow;\nconst pow2 = TSL.pow2;\nconst pow3 = TSL.pow3;\nconst pow4 = TSL.pow4;\nconst premultiplyAlpha = TSL.premultiplyAlpha;\nconst property = TSL.property;\nconst radians = TSL.radians;\nconst rand = TSL.rand;\nconst range = TSL.range;\nconst rangeFog = TSL.rangeFog;\nconst rangeFogFactor = TSL.rangeFogFactor;\nconst reciprocal = TSL.reciprocal;\nconst lightProjectionUV = TSL.lightProjectionUV;\nconst reference = TSL.reference;\nconst referenceBuffer = TSL.referenceBuffer;\nconst reflect = TSL.reflect;\nconst reflectVector = TSL.reflectVector;\nconst reflectView = TSL.reflectView;\nconst reflector = TSL.reflector;\nconst refract = TSL.refract;\nconst refractVector = TSL.refractVector;\nconst refractView = TSL.refractView;\nconst reinhardToneMapping = TSL.reinhardToneMapping;\nconst remainder = TSL.remainder;\nconst remap = TSL.remap;\nconst remapClamp = TSL.remapClamp;\nconst renderGroup = TSL.renderGroup;\nconst renderOutput = TSL.renderOutput;\nconst rendererReference = TSL.rendererReference;\nconst rotate = TSL.rotate;\nconst rotateUV = TSL.rotateUV;\nconst roughness = TSL.roughness;\nconst round = TSL.round;\nconst rtt = TSL.rtt;\nconst sRGBTransferEOTF = TSL.sRGBTransferEOTF;\nconst sRGBTransferOETF = TSL.sRGBTransferOETF;\nconst sample = TSL.sample;\nconst sampler = TSL.sampler;\nconst samplerComparison = TSL.samplerComparison;\nconst saturate = TSL.saturate;\nconst saturation = TSL.saturation;\nconst screen = TSL.screen;\nconst screenCoordinate = TSL.screenCoordinate;\nconst screenSize = TSL.screenSize;\nconst screenUV = TSL.screenUV;\nconst scriptable = TSL.scriptable;\nconst scriptableValue = TSL.scriptableValue;\nconst select = TSL.select;\nconst setCurrentStack = TSL.setCurrentStack;\nconst shaderStages = TSL.shaderStages;\nconst shadow = TSL.shadow;\nconst pointShadow = TSL.pointShadow;\nconst shadowPositionWorld = TSL.shadowPositionWorld;\nconst sharedUniformGroup = TSL.sharedUniformGroup;\nconst shapeCircle = TSL.shapeCircle;\nconst sheen = TSL.sheen;\nconst sheenRoughness = TSL.sheenRoughness;\nconst shiftLeft = TSL.shiftLeft;\nconst shiftRight = TSL.shiftRight;\nconst shininess = TSL.shininess;\nconst sign = TSL.sign;\nconst sin = TSL.sin;\nconst sinc = TSL.sinc;\nconst skinning = TSL.skinning;\nconst smoothstep = TSL.smoothstep;\nconst smoothstepElement = TSL.smoothstepElement;\nconst specularColor = TSL.specularColor;\nconst specularF90 = TSL.specularF90;\nconst spherizeUV = TSL.spherizeUV;\nconst split = TSL.split;\nconst spritesheetUV = TSL.spritesheetUV;\nconst sqrt = TSL.sqrt;\nconst stack = TSL.stack;\nconst step = TSL.step;\nconst storage = TSL.storage;\nconst storageBarrier = TSL.storageBarrier;\nconst storageObject = TSL.storageObject;\nconst storageTexture = TSL.storageTexture;\nconst string = TSL.string;\nconst struct = TSL.struct;\nconst sub = TSL.sub;\nconst subBuild = TSL.subBuild;\nconst subgroupIndex = TSL.subgroupIndex;\nconst subgroupSize = TSL.subgroupSize;\nconst tan = TSL.tan;\nconst tangentGeometry = TSL.tangentGeometry;\nconst tangentLocal = TSL.tangentLocal;\nconst tangentView = TSL.tangentView;\nconst tangentWorld = TSL.tangentWorld;\nconst temp = TSL.temp;\nconst texture = TSL.texture;\nconst texture3D = TSL.texture3D;\nconst textureBarrier = TSL.textureBarrier;\nconst textureBicubic = TSL.textureBicubic;\nconst textureBicubicLevel = TSL.textureBicubicLevel;\nconst textureCubeUV = TSL.textureCubeUV;\nconst textureLoad = TSL.textureLoad;\nconst textureSize = TSL.textureSize;\nconst textureStore = TSL.textureStore;\nconst thickness = TSL.thickness;\nconst time = TSL.time;\nconst timerDelta = TSL.timerDelta;\nconst timerGlobal = TSL.timerGlobal;\nconst timerLocal = TSL.timerLocal;\nconst toneMapping = TSL.toneMapping;\nconst toneMappingExposure = TSL.toneMappingExposure;\nconst toonOutlinePass = TSL.toonOutlinePass;\nconst transformDirection = TSL.transformDirection;\nconst transformNormal = TSL.transformNormal;\nconst transformNormalToView = TSL.transformNormalToView;\nconst transformedClearcoatNormalView = TSL.transformedClearcoatNormalView;\nconst transformedNormalView = TSL.transformedNormalView;\nconst transformedNormalWorld = TSL.transformedNormalWorld;\nconst transmission = TSL.transmission;\nconst transpose = TSL.transpose;\nconst triNoise3D = TSL.triNoise3D;\nconst triplanarTexture = TSL.triplanarTexture;\nconst triplanarTextures = TSL.triplanarTextures;\nconst trunc = TSL.trunc;\nconst tslFn = TSL.tslFn;\nconst uint = TSL.uint;\nconst uniform = TSL.uniform;\nconst uniformCubeTexture = TSL.uniformCubeTexture;\nconst uniformArray = TSL.uniformArray;\nconst uniformGroup = TSL.uniformGroup;\nconst uniformTexture = TSL.uniformTexture;\nconst uniforms = TSL.uniforms;\nconst unpremultiplyAlpha = TSL.unpremultiplyAlpha;\nconst userData = TSL.userData;\nconst uv = TSL.uv;\nconst uvec2 = TSL.uvec2;\nconst uvec3 = TSL.uvec3;\nconst uvec4 = TSL.uvec4;\nconst Var = TSL.Var;\nconst varying = TSL.varying;\nconst varyingProperty = TSL.varyingProperty;\nconst vec2 = TSL.vec2;\nconst vec3 = TSL.vec3;\nconst vec4 = TSL.vec4;\nconst vectorComponents = TSL.vectorComponents;\nconst velocity = TSL.velocity;\nconst vertexColor = TSL.vertexColor;\nconst vertexIndex = TSL.vertexIndex;\nconst vibrance = TSL.vibrance;\nconst viewZToLogarithmicDepth = TSL.viewZToLogarithmicDepth;\nconst viewZToOrthographicDepth = TSL.viewZToOrthographicDepth;\nconst viewZToPerspectiveDepth = TSL.viewZToPerspectiveDepth;\nconst viewport = TSL.viewport;\nconst viewportBottomLeft = TSL.viewportBottomLeft;\nconst viewportCoordinate = TSL.viewportCoordinate;\nconst viewportDepthTexture = TSL.viewportDepthTexture;\nconst viewportLinearDepth = TSL.viewportLinearDepth;\nconst viewportMipTexture = TSL.viewportMipTexture;\nconst viewportResolution = TSL.viewportResolution;\nconst viewportSafeUV = TSL.viewportSafeUV;\nconst viewportSharedTexture = TSL.viewportSharedTexture;\nconst viewportSize = TSL.viewportSize;\nconst viewportTexture = TSL.viewportTexture;\nconst viewportTopLeft = TSL.viewportTopLeft;\nconst viewportUV = TSL.viewportUV;\nconst wgsl = TSL.wgsl;\nconst wgslFn = TSL.wgslFn;\nconst workgroupArray = TSL.workgroupArray;\nconst workgroupBarrier = TSL.workgroupBarrier;\nconst workgroupId = TSL.workgroupId;\nconst workingToColorSpace = TSL.workingToColorSpace;\nconst xor = TSL.xor;\n\nexport { BRDF_GGX, BRDF_Lambert, BasicShadowFilter, Break, Const, Continue, DFGApprox, D_GGX, Discard, EPSILON, F_Schlick, Fn, INFINITY, If, Loop, NodeAccess, NodeShaderStage, NodeType, NodeUpdateType, PCFShadowFilter, PCFSoftShadowFilter, PI, PI2, Return, Schlick_to_F0, ScriptableNodeResources, ShaderNode, Switch, TBNViewMatrix, VSMShadowFilter, V_GGX_SmithCorrelated, Var, abs, acesFilmicToneMapping, acos, add, addNodeElement, agxToneMapping, all, alphaT, and, anisotropy, anisotropyB, anisotropyT, any, append, array, arrayBuffer, asin, assign, atan, atan2, atomicAdd, atomicAnd, atomicFunc, atomicLoad, atomicMax, atomicMin, atomicOr, atomicStore, atomicSub, atomicXor, attenuationColor, attenuationDistance, attribute, attributeArray, backgroundBlurriness, backgroundIntensity, backgroundRotation, batch, bentNormalView, billboarding, bitAnd, bitNot, bitOr, bitXor, bitangentGeometry, bitangentLocal, bitangentView, bitangentWorld, bitcast, blendBurn, blendColor, blendDodge, blendOverlay, blendScreen, blur, bool, buffer, bufferAttribute, bumpMap, burn, bvec2, bvec3, bvec4, bypass, cache, call, cameraFar, cameraIndex, cameraNear, cameraNormalMatrix, cameraPosition, cameraProjectionMatrix, cameraProjectionMatrixInverse, cameraViewMatrix, cameraWorldMatrix, cbrt, cdl, ceil, checker, cineonToneMapping, clamp, clearcoat, clearcoatRoughness, code, color, colorSpaceToWorking, colorToDirection, compute, computeSkinning, cond, context, convert, convertColorSpace, convertToTexture, cos, cross, cubeTexture, dFdx, dFdy, dashSize, debug, decrement, decrementBefore, defaultBuildStages, defaultShaderStages, defined, degrees, deltaTime, densityFog, densityFogFactor, depth, depthPass, difference, diffuseColor, directPointLight, directionToColor, dispersion, distance, div, dodge, dot, drawIndex, dynamicBufferAttribute, element, emissive, equal, equals, equirectUV, exp, exp2, expression, faceDirection, faceForward, faceforward, float, floor, fog, fract, frameGroup, frameId, frontFacing, fwidth, gain, gapSize, getConstNodeType, getCurrentStack, getDirection, getDistanceAttenuation, getGeometryRoughness, getNormalFromDepth, getParallaxCorrectNormal, getRoughness, getScreenPosition, getShIrradianceAt, getShadowMaterial, getShadowRenderObjectFunction, getTextureIndex, getViewPosition, globalId, glsl, glslFn, grayscale, greaterThan, greaterThanEqual, hash, highpModelNormalViewMatrix, highpModelViewMatrix, hue, increment, incrementBefore, instance, instanceIndex, instancedArray, instancedBufferAttribute, instancedDynamicBufferAttribute, instancedMesh, int, inverseSqrt, inversesqrt, invocationLocalIndex, invocationSubgroupIndex, ior, iridescence, iridescenceIOR, iridescenceThickness, ivec2, ivec3, ivec4, js, label, length, lengthSq, lessThan, lessThanEqual, lightPosition, lightProjectionUV, lightShadowMatrix, lightTargetDirection, lightTargetPosition, lightViewPosition, lightingContext, lights, linearDepth, linearToneMapping, localId, log, log2, logarithmicDepthToViewZ, loop, luminance, mat2, mat3, mat4, matcapUV, materialAO, materialAlphaTest, materialAnisotropy, materialAnisotropyVector, materialAttenuationColor, materialAttenuationDistance, materialClearcoat, materialClearcoatNormal, materialClearcoatRoughness, materialColor, materialDispersion, materialEmissive, materialIOR, materialIridescence, materialIridescenceIOR, materialIridescenceThickness, materialLightMap, materialLineDashOffset, materialLineDashSize, materialLineGapSize, materialLineScale, materialLineWidth, materialMetalness, materialNormal, materialOpacity, materialPointSize, materialReference, materialReflectivity, materialRefractionRatio, materialRotation, materialRoughness, materialSheen, materialSheenRoughness, materialShininess, materialSpecular, materialSpecularColor, materialSpecularIntensity, materialSpecularStrength, materialThickness, materialTransmission, max, maxMipLevel, mediumpModelViewMatrix, metalness, min, mix, mixElement, mod, modInt, modelDirection, modelNormalMatrix, modelPosition, modelRadius, modelScale, modelViewMatrix, modelViewPosition, modelViewProjection, modelWorldMatrix, modelWorldMatrixInverse, morphReference, mrt, mul, mx_aastep, mx_cell_noise_float, mx_contrast, mx_fractal_noise_float, mx_fractal_noise_vec2, mx_fractal_noise_vec3, mx_fractal_noise_vec4, mx_hsvtorgb, mx_noise_float, mx_noise_vec3, mx_noise_vec4, mx_ramplr, mx_ramptb, mx_rgbtohsv, mx_safepower, mx_splitlr, mx_splittb, mx_srgb_texture_to_lin_rec709, mx_transform_uv, mx_worley_noise_float, mx_worley_noise_vec2, mx_worley_noise_vec3, negate, neutralToneMapping, nodeArray, nodeImmutable, nodeObject, nodeObjects, nodeProxy, normalFlat, normalGeometry, normalLocal, normalMap, normalView, normalViewGeometry, normalWorld, normalWorldGeometry, normalize, not, notEqual, numWorkgroups, objectDirection, objectGroup, objectPosition, objectRadius, objectScale, objectViewPosition, objectWorldMatrix, oneMinus, or, orthographicDepthToViewZ, oscSawtooth, oscSine, oscSquare, oscTriangle, output, outputStruct, overlay, overloadingFn, parabola, parallaxDirection, parallaxUV, parameter, pass, passTexture, pcurve, perspectiveDepthToViewZ, pmremTexture, pointShadow, pointUV, pointWidth, positionGeometry, positionLocal, positionPrevious, positionView, positionViewDirection, positionWorld, positionWorldDirection, posterize, pow, pow2, pow3, pow4, premultiplyAlpha, property, radians, rand, range, rangeFog, rangeFogFactor, reciprocal, reference, referenceBuffer, reflect, reflectVector, reflectView, reflector, refract, refractVector, refractView, reinhardToneMapping, remainder, remap, remapClamp, renderGroup, renderOutput, rendererReference, rotate, rotateUV, roughness, round, rtt, sRGBTransferEOTF, sRGBTransferOETF, sample, sampler, samplerComparison, saturate, saturation, screen, screenCoordinate, screenSize, screenUV, scriptable, scriptableValue, select, setCurrentStack, shaderStages, shadow, shadowPositionWorld, shapeCircle, sharedUniformGroup, sheen, sheenRoughness, shiftLeft, shiftRight, shininess, sign, sin, sinc, skinning, smoothstep, smoothstepElement, specularColor, specularF90, spherizeUV, split, spritesheetUV, sqrt, stack, step, storage, storageBarrier, storageObject, storageTexture, string, struct, sub, subBuild, subgroupIndex, subgroupSize, tan, tangentGeometry, tangentLocal, tangentView, tangentWorld, temp, texture, texture3D, textureBarrier, textureBicubic, textureBicubicLevel, textureCubeUV, textureLoad, textureSize, textureStore, thickness, time, timerDelta, timerGlobal, timerLocal, toneMapping, toneMappingExposure, toonOutlinePass, transformDirection, transformNormal, transformNormalToView, transformedClearcoatNormalView, transformedNormalView, transformedNormalWorld, transmission, transpose, triNoise3D, triplanarTexture, triplanarTextures, trunc, tslFn, uint, uniform, uniformArray, uniformCubeTexture, uniformGroup, uniformTexture, uniforms, unpremultiplyAlpha, userData, uv, uvec2, uvec3, uvec4, varying, varyingProperty, vec2, vec3, vec4, vectorComponents, velocity, vertexColor, vertexIndex, vibrance, viewZToLogarithmicDepth, viewZToOrthographicDepth, viewZToPerspectiveDepth, viewport, viewportBottomLeft, viewportCoordinate, viewportDepthTexture, viewportLinearDepth, viewportMipTexture, viewportResolution, viewportSafeUV, viewportSharedTexture, viewportSize, viewportTexture, viewportTopLeft, viewportUV, wgsl, wgslFn, workgroupArray, workgroupBarrier, workgroupId, workingToColorSpace, xor };\n", "// This module will be imported at the beginning of `three-vrm-materials-mtoon/nodes`\n// If the version of Three.js is less than r167, it will warn that it is not supported\n\nimport * as THREE from 'three';\n\nconst threeRevision = parseInt(THREE.REVISION, 10);\nif (threeRevision < 167) {\n  console.warn(\n    `MToonNodeMaterial requires Three.js r167 or higher (You are using r${threeRevision}). This would not work correctly.`,\n  );\n}\n", "import * as THREE from 'three/webgpu';\nimport { cos, mat2, NodeRepresentation, ShaderNodeObject, sin, Swizzable, uv, vec2, vec4 } from 'three/tsl';\nimport {\n  refUVAnimationMaskTexture,\n  refUVAnimationRotationPhase,\n  refUVAnimationScrollXOffset,\n  refUVAnimationScrollYOffset,\n} from './materialReferences';\n\nexport class MToonAnimatedUVNode extends THREE.TempNode {\n  public readonly hasMaskTexture: boolean;\n\n  public constructor(hasMaskTexture: boolean) {\n    super('vec2');\n\n    this.hasMaskTexture = hasMaskTexture;\n  }\n\n  public setup(): ShaderNodeObject<THREE.VarNode> {\n    let uvAnimationMask: NodeRepresentation = 1.0;\n\n    if (this.hasMaskTexture) {\n      uvAnimationMask = vec4(refUVAnimationMaskTexture).context({ getUV: () => uv() }).r;\n    }\n\n    let animatedUv: ShaderNodeObject<Swizzable> = uv();\n\n    // rotate\n    const phase = refUVAnimationRotationPhase.mul(uvAnimationMask);\n\n    // WORKAROUND: THREE.rotateUV causes an issue with the mask texture\n    // We are going to spin using a 100% organic handmade rotation matrix\n    // animatedUv = THREE.rotateUV(animatedUv, phase, THREE.vec2(0.5, 0.5));\n\n    const c = cos(phase);\n    const s = sin(phase);\n    animatedUv = animatedUv.sub(vec2(0.5, 0.5));\n    animatedUv = animatedUv.mul(mat2(c, s, s.negate(), c));\n    animatedUv = animatedUv.add(vec2(0.5, 0.5));\n\n    // scroll\n    const scroll = vec2(refUVAnimationScrollXOffset, refUVAnimationScrollYOffset).mul(uvAnimationMask);\n    animatedUv = animatedUv.add(scroll);\n\n    return animatedUv.toVar('AnimatedUV');\n  }\n}\n", "import { materialReference } from 'three/tsl';\n\nexport const refColor = materialReference('color', 'color');\nexport const refMap = materialReference('map', 'texture');\nexport const refNormalMap = materialReference('normalMap', 'texture');\nexport const refNormalScale = materialReference('normalScale', 'vec2');\nexport const refEmissive = materialReference('emissive', 'color');\nexport const refEmissiveIntensity = materialReference('emissiveIntensity', 'float');\nexport const refEmissiveMap = materialReference('emissiveMap', 'texture');\n\nexport const refShadeColorFactor = materialReference('shadeColorFactor', 'color');\nexport const refShadingShiftFactor = materialReference('shadingShiftFactor', 'float');\nexport const refShadeMultiplyTexture = materialReference('shadeMultiplyTexture', 'texture');\nexport const refShadeMultiplyTextureScale = materialReference('shadeMultiplyTextureScale', 'float');\nexport const refShadingToonyFactor = materialReference('shadingToonyFactor', 'float');\nexport const refRimLightingMixFactor = materialReference('rimLightingMixFactor', 'float');\nexport const refRimMultiplyTexture = materialReference('rimMultiplyTexture', 'texture');\nexport const refMatcapFactor = materialReference('matcapFactor', 'color');\nexport const refMatcapTexture = materialReference('matcapTexture', 'texture');\nexport const refParametricRimColorFactor = materialReference('parametricRimColorFactor', 'color');\nexport const refParametricRimLiftFactor = materialReference('parametricRimLiftFactor', 'float');\nexport const refParametricRimFresnelPowerFactor = materialReference('parametricRimFresnelPowerFactor', 'float');\nexport const refOutlineWidthMultiplyTexture = materialReference('outlineWidthMultiplyTexture', 'texture');\nexport const refOutlineWidthFactor = materialReference('outlineWidthFactor', 'float');\nexport const refOutlineColorFactor = materialReference('outlineColorFactor', 'color');\nexport const refOutlineLightingMixFactor = materialReference('outlineLightingMixFactor', 'float');\nexport const refUVAnimationMaskTexture = materialReference('uvAnimationMaskTexture', 'texture');\n\nexport const refUVAnimationScrollXOffset = materialReference('uvAnimationScrollXOffset', 'float');\nexport const refUVAnimationScrollYOffset = materialReference('uvAnimationScrollYOffset', 'float');\nexport const refUVAnimationRotationPhase = materialReference('uvAnimationRotationPhase', 'float');\n", "import * as THREE from 'three/webgpu';\nimport { BRDF_Lambert, diffuseColor, float, mix, ShaderNodeObject, transformedNormalView, vec3 } from 'three/tsl';\nimport {\n  matcap,\n  parametricRim,\n  rimLightingMix,\n  rimMultiply,\n  shadeColor,\n  shadingShift,\n  shadingToony,\n} from './immutableNodes';\nimport { FnCompat } from './utils/FnCompat';\n\n// TODO: 0% confidence about function types.\n\nconst linearstep = FnCompat(\n  ({\n    a,\n    b,\n    t,\n  }: {\n    a: ShaderNodeObject<THREE.Node>;\n    b: ShaderNodeObject<THREE.Node>;\n    t: ShaderNodeObject<THREE.Node>;\n  }) => {\n    const top = t.sub(a);\n    const bottom = b.sub(a);\n    return top.div(bottom).clamp();\n  },\n);\n\n/**\n * Convert NdotL into toon shading factor using shadingShift and shadingToony\n */\nconst getShading = FnCompat(({ dotNL }: { dotNL: ShaderNodeObject<THREE.Node> }) => {\n  const shadow = 1.0; // TODO\n\n  const feather = float(1.0).sub(shadingToony);\n\n  let shading: ShaderNodeObject<THREE.Node> = dotNL.add(shadingShift);\n  shading = linearstep({\n    a: feather.negate(),\n    b: feather,\n    t: shading,\n  });\n  shading = shading.mul(shadow);\n  return shading;\n});\n\n/**\n * Mix diffuseColor and shadeColor using shading factor and light color\n */\nconst getDiffuse = FnCompat(\n  ({ shading, lightColor }: { shading: ShaderNodeObject<THREE.Node>; lightColor: ShaderNodeObject<THREE.Node> }) => {\n    const feathered = mix(shadeColor, diffuseColor, shading);\n    const col = lightColor.mul(BRDF_Lambert({ diffuseColor: feathered }));\n\n    return col;\n  },\n);\n\nexport class MToonLightingModel extends THREE.LightingModel {\n  constructor() {\n    super();\n  }\n\n  direct({\n    lightDirection,\n    lightColor,\n    reflectedLight,\n  }: THREE.LightingModelDirectInput & { lightDirection: THREE.Node; lightColor: THREE.Node }) {\n    const dotNL = transformedNormalView.dot(lightDirection).clamp(-1.0, 1.0);\n\n    // toon diffuse\n    const shading = getShading({\n      dotNL,\n    });\n\n    (reflectedLight.directDiffuse as ShaderNodeObject<THREE.Node>).addAssign(\n      getDiffuse({\n        shading,\n        lightColor: lightColor as ShaderNodeObject<THREE.Node>,\n      }),\n    );\n\n    // rim\n    (reflectedLight.directSpecular as ShaderNodeObject<THREE.Node>).addAssign(\n      parametricRim\n        .add(matcap)\n        .mul(rimMultiply)\n        .mul(mix(vec3(0.0), BRDF_Lambert({ diffuseColor: lightColor }), rimLightingMix)),\n    );\n  }\n\n  // COMPAT: pre-r174\n  // `builderOrContext`: `THREE.NodeBuilder` in >= r174, `LightingModelIndirectInput` (`LightingContext`) otherwise\n  indirect(builderOrContext: THREE.NodeBuilder | THREE.LightingContext) {\n    const context: THREE.LightingContext =\n      'context' in builderOrContext ? (builderOrContext.context as unknown as THREE.LightingContext) : builderOrContext;\n\n    this.indirectDiffuse(context);\n    this.indirectSpecular(context);\n  }\n\n  indirectDiffuse(context: THREE.LightingContext) {\n    const { irradiance, reflectedLight } = context;\n\n    // indirect irradiance\n    (reflectedLight.indirectDiffuse as ShaderNodeObject<THREE.Node>).addAssign(\n      (irradiance as ShaderNodeObject<THREE.Node>).mul(BRDF_Lambert({ diffuseColor })),\n    );\n  }\n\n  indirectSpecular(context: THREE.LightingContext) {\n    const { reflectedLight } = context;\n\n    // rim\n    (reflectedLight.indirectSpecular as ShaderNodeObject<THREE.Node>).addAssign(\n      parametricRim\n        .add(matcap)\n        .mul(rimMultiply)\n        .mul(mix(vec3(1.0), vec3(0.0), rimLightingMix)),\n    );\n  }\n}\n", "import * as THREE from 'three/webgpu';\nimport { nodeImmutable } from 'three/tsl';\n\nexport const shadeColor = nodeImmutable(THREE.PropertyNode, 'vec3').toVar('ShadeColor');\nexport const shadingShift = nodeImmutable(THREE.PropertyNode, 'float').toVar('ShadingShift');\nexport const shadingToony = nodeImmutable(THREE.PropertyNode, 'float').toVar('ShadingToony');\nexport const rimLightingMix = nodeImmutable(THREE.PropertyNode, 'float').toVar('RimLightingMix');\nexport const rimMultiply = nodeImmutable(THREE.PropertyNode, 'vec3').toVar('RimMultiply');\nexport const matcap = nodeImmutable(THREE.PropertyNode, 'vec3').toVar('matcap');\nexport const parametricRim = nodeImmutable(THREE.PropertyNode, 'vec3').toVar('ParametricRim');\n", "import * as THREE_TSL from 'three/tsl';\nimport * as THREE_WEBGPU from 'three/webgpu';\n\n/**\n * A compat function for `Fn()` / `tslFn()`.\n * `tslFn()` has been renamed to `Fn()` in r168.\n * We are going to use this compat for a while.\n *\n * See: https://github.com/mrdoob/three.js/pull/29064\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const FnCompat: typeof THREE_TSL.Fn = (jsFunc: any) => {\n  // COMPAT r168: `tslFn()` has been renamed to `Fn()`\n  // See: https://github.com/mrdoob/three.js/pull/29064\n  const threeRevision = parseInt(THREE_WEBGPU.REVISION, 10);\n  if (threeRevision >= 168) {\n    return (THREE_TSL as any).Fn(jsFunc);\n  } else {\n    return (THREE_WEBGPU as any).tslFn(jsFunc);\n  }\n};\n", "import * as THREE from 'three/webgpu';\nimport {\n  cameraProjectionMatrix,\n  diffuseColor,\n  float,\n  length,\n  matcapUV,\n  materialNormal,\n  mix,\n  modelNormalMatrix,\n  modelViewMatrix,\n  normalLocal,\n  normalMap,\n  positionLocal,\n  positionView,\n  ShaderNodeObject,\n  Swizzable,\n  vec3,\n  vec4,\n} from 'three/tsl';\n\nimport type { MToonMaterial } from '../MToonMaterial';\nimport { MToonLightingModel } from './MToonLightingModel';\nimport {\n  rimLightingMix,\n  matcap,\n  shadeColor,\n  shadingShift,\n  shadingToony,\n  rimMultiply,\n  parametricRim,\n} from './immutableNodes';\nimport {\n  refColor,\n  refEmissive,\n  refEmissiveIntensity,\n  refEmissiveMap,\n  refMap,\n  refMatcapFactor,\n  refMatcapTexture,\n  refNormalMap,\n  refNormalScale,\n  refOutlineColorFactor,\n  refOutlineLightingMixFactor,\n  refOutlineWidthFactor,\n  refOutlineWidthMultiplyTexture,\n  refParametricRimColorFactor,\n  refParametricRimFresnelPowerFactor,\n  refParametricRimLiftFactor,\n  refRimLightingMixFactor,\n  refRimMultiplyTexture,\n  refShadeColorFactor,\n  refShadeMultiplyTexture,\n  refShadeMultiplyTextureScale,\n  refShadingShiftFactor,\n  refShadingToonyFactor,\n} from './materialReferences';\nimport { MToonAnimatedUVNode } from './MToonAnimatedUVNode';\nimport { MToonMaterialOutlineWidthMode } from '../MToonMaterialOutlineWidthMode';\nimport { MToonNodeMaterialParameters } from './MToonNodeMaterialParameters';\nimport { mtoonParametricRim } from './mtoonParametricRim';\n\n/**\n * MToon is a material specification that has various features.\n * The spec and implementation are originally founded for Unity engine and this is a port of the material.\n *\n * This material is a NodeMaterial variant of {@link MToonMaterial}.\n *\n * See: https://github.com/Santarh/MToon\n */\nexport class MToonNodeMaterial extends THREE.NodeMaterial {\n  public emissiveNode: ShaderNodeObject<THREE.Node> | null;\n\n  public color: THREE.Color;\n  public map: THREE.Texture | null;\n  public emissive: THREE.Color;\n  public emissiveIntensity: number;\n  public emissiveMap: THREE.Texture | null;\n  public normalMap: THREE.Texture | null;\n  public normalScale: THREE.Vector2;\n\n  public shadeColorFactor: THREE.Color;\n  public shadeMultiplyTexture: THREE.Texture | null;\n  public shadingShiftFactor: number;\n  public shadingShiftTexture: THREE.Texture | null;\n  public shadingShiftTextureScale: number;\n  public shadingToonyFactor: number;\n  public rimLightingMixFactor: number;\n  public rimMultiplyTexture: THREE.Texture | null;\n  public matcapFactor: THREE.Color;\n  public matcapTexture: THREE.Texture | null;\n  public parametricRimColorFactor: THREE.Color;\n  public parametricRimLiftFactor: number;\n  public parametricRimFresnelPowerFactor: number;\n  public outlineWidthMode: MToonMaterialOutlineWidthMode;\n  public outlineWidthMultiplyTexture: THREE.Texture | null;\n  public outlineWidthFactor: number;\n  public outlineColorFactor: THREE.Color;\n  public outlineLightingMixFactor: number;\n  public uvAnimationScrollXSpeedFactor: number;\n  public uvAnimationScrollYSpeedFactor: number;\n  public uvAnimationRotationSpeedFactor: number;\n  public uvAnimationMaskTexture: THREE.Texture | null;\n\n  public shadeColorNode: Swizzable | null;\n  public shadingShiftNode: THREE.Node | null;\n  public shadingToonyNode: THREE.Node | null;\n  public rimLightingMixNode: THREE.Node | null;\n  public rimMultiplyNode: THREE.Node | null;\n  public matcapNode: THREE.Node | null;\n  public parametricRimColorNode: Swizzable | null;\n  public parametricRimLiftNode: THREE.Node | null;\n  public parametricRimFresnelPowerNode: THREE.Node | null;\n\n  public uvAnimationScrollXOffset: number;\n  public uvAnimationScrollYOffset: number;\n  public uvAnimationRotationPhase: number;\n\n  public isOutline: boolean;\n\n  private _animatedUVNode: MToonAnimatedUVNode | null;\n\n  public customProgramCacheKey(): string {\n    let cacheKey = super.customProgramCacheKey();\n\n    cacheKey += `isOutline:${this.isOutline},`;\n\n    return cacheKey;\n  }\n\n  /**\n   * Readonly boolean that indicates this is a {@link MToonNodeMaterial}.\n   */\n  public get isMToonNodeMaterial(): true {\n    return true;\n  }\n\n  public constructor(parameters: MToonNodeMaterialParameters = {}) {\n    super();\n\n    if (parameters.transparentWithZWrite) {\n      parameters.depthWrite = true;\n    }\n    delete parameters.transparentWithZWrite;\n\n    // `MToonMaterialLoaderPlugin` assigns these parameters to the material\n    // However, `MToonNodeMaterial` does not support these parameters\n    // so we delete them here to suppress warnings\n    delete (parameters as any).giEqualizationFactor;\n    delete (parameters as any).v0CompatShade;\n    delete (parameters as any).debugMode;\n\n    this.emissiveNode = null;\n\n    this.lights = true;\n\n    this.color = new THREE.Color(1.0, 1.0, 1.0);\n    this.map = null;\n    this.emissive = new THREE.Color(0.0, 0.0, 0.0);\n    this.emissiveIntensity = 1.0;\n    this.emissiveMap = null;\n    this.normalMap = null;\n    this.normalScale = new THREE.Vector2(1.0, 1.0);\n    this.shadeColorFactor = new THREE.Color(0.0, 0.0, 0.0);\n    this.shadeMultiplyTexture = null;\n    this.shadingShiftFactor = 0.0;\n    this.shadingShiftTexture = null;\n    this.shadingShiftTextureScale = 1.0;\n    this.shadingToonyFactor = 0.9;\n    this.rimLightingMixFactor = 1.0;\n    this.rimMultiplyTexture = null;\n    this.matcapFactor = new THREE.Color(1.0, 1.0, 1.0);\n    this.matcapTexture = null;\n    this.parametricRimColorFactor = new THREE.Color(0.0, 0.0, 0.0);\n    this.parametricRimLiftFactor = 0.0;\n    this.parametricRimFresnelPowerFactor = 5.0;\n    this.outlineWidthMode = MToonMaterialOutlineWidthMode.None;\n    this.outlineWidthMultiplyTexture = null;\n    this.outlineWidthFactor = 0.0;\n    this.outlineColorFactor = new THREE.Color(0.0, 0.0, 0.0);\n    this.outlineLightingMixFactor = 1.0;\n    this.uvAnimationScrollXSpeedFactor = 0.0;\n    this.uvAnimationScrollYSpeedFactor = 0.0;\n    this.uvAnimationRotationSpeedFactor = 0.0;\n    this.uvAnimationMaskTexture = null;\n\n    this.shadeColorNode = null;\n    this.shadingShiftNode = null;\n    this.shadingToonyNode = null;\n    this.rimLightingMixNode = null;\n    this.rimMultiplyNode = null;\n    this.matcapNode = null;\n    this.parametricRimColorNode = null;\n    this.parametricRimLiftNode = null;\n    this.parametricRimFresnelPowerNode = null;\n\n    this.uvAnimationScrollXOffset = 0.0;\n    this.uvAnimationScrollYOffset = 0.0;\n    this.uvAnimationRotationPhase = 0.0;\n\n    this.isOutline = false;\n\n    this._animatedUVNode = null;\n\n    this.setValues(parameters);\n  }\n\n  public setupLightingModel(/*builder*/): MToonLightingModel {\n    return new MToonLightingModel();\n  }\n\n  public setup(builder: THREE.NodeBuilder): void {\n    this._animatedUVNode = new MToonAnimatedUVNode(\n      (this.uvAnimationMaskTexture && this.uvAnimationMaskTexture.isTexture === true) ?? false,\n    );\n\n    super.setup(builder);\n  }\n\n  public setupDiffuseColor(builder: THREE.NodeBuilder): void {\n    // we must apply uv scroll to the map\n    // this.colorNode will be used in super.setupDiffuseColor() so we temporarily replace it\n    let tempColorNode: ShaderNodeObject<THREE.Node> | null = null;\n\n    if (this.colorNode == null) {\n      tempColorNode = refColor;\n\n      if (this.map && this.map.isTexture === true) {\n        const map = refMap.context({ getUV: () => this._animatedUVNode });\n        tempColorNode = tempColorNode.mul(map);\n      }\n\n      this.colorNode = tempColorNode;\n    }\n\n    // MToon must ignore vertex color by spec\n    // See: https://github.com/vrm-c/vrm-specification/blob/42c0a90e6b4b710352569978f14980e9fc94b25d/specification/VRMC_materials_mtoon-1.0/README.md#vertex-colors\n    if (this.vertexColors === true && builder.geometry.hasAttribute('color')) {\n      console.warn(\n        'MToonNodeMaterial: MToon ignores vertex colors. Consider using a model without vertex colors instead.',\n      );\n      this.vertexColors = false;\n    }\n\n    // the ordinary diffuseColor setup\n    super.setupDiffuseColor(builder);\n\n    // COMPAT: pre-r166\n    // Set alpha to 1 if it is opaque\n    // Addressed in Three.js r166 but we leave it here for compatibility\n    // See: https://github.com/mrdoob/three.js/pull/28646\n    if (parseInt(THREE.REVISION, 10) < 166) {\n      if (this.transparent === false && this.blending === THREE.NormalBlending && this.alphaToCoverage === false) {\n        diffuseColor.a.assign(1.0);\n      }\n    }\n\n    // revert the colorNode\n    if (this.colorNode === tempColorNode) {\n      this.colorNode = null;\n    }\n  }\n\n  public setupVariants(): void {\n    shadeColor.assign(this._setupShadeColorNode());\n    shadingShift.assign(this._setupShadingShiftNode());\n    shadingToony.assign(this._setupShadingToonyNode());\n    rimLightingMix.assign(this._setupRimLightingMixNode());\n    rimMultiply.assign(this._setupRimMultiplyNode());\n    matcap.assign(this._setupMatcapNode());\n    parametricRim.assign(this._setupParametricRimNode());\n  }\n\n  public setupNormal(builder: THREE.NodeBuilder): ShaderNodeObject<THREE.Node> {\n    // we must apply uv scroll to the normalMap\n    // this.normalNode will be used in super.setupNormal() so we temporarily replace it\n    const tempNormalNode = this.normalNode;\n\n    if (this.normalNode == null) {\n      this.normalNode = materialNormal;\n\n      if (this.normalMap && this.normalMap.isTexture === true) {\n        const map = refNormalMap.context({ getUV: () => this._animatedUVNode });\n        this.normalNode = normalMap(map, refNormalScale);\n      }\n\n      if (this.isOutline) {\n        // See about the type assertion: https://github.com/three-types/three-ts-types/pull/1123\n        this.normalNode = (this.normalNode as ShaderNodeObject<THREE.Node>).negate();\n      }\n    }\n\n    // COMPAT r168: `setupNormal` now returns the normal node\n    // instead of assigning inside the `super.setupNormal`\n    // See: https://github.com/mrdoob/three.js/pull/29137\n    const threeRevision = parseInt(THREE.REVISION, 10);\n    if (threeRevision >= 168) {\n      const ret = this.normalNode as ShaderNodeObject<THREE.Node>;\n\n      // revert the normalNode\n      this.normalNode = tempNormalNode;\n\n      return ret;\n    } else {\n      // pre-r168\n      // the ordinary normal setup\n      super.setupNormal(builder);\n\n      // revert the normalNode\n      this.normalNode = tempNormalNode;\n\n      // type workaround: pretend to return a valid value\n      // r167 doesn't use the return value anyway\n      return undefined as any;\n    }\n  }\n\n  public setupLighting(builder: THREE.NodeBuilder): THREE.Node {\n    // we must apply uv scroll to the emissiveMap\n    // this.emissiveNode will be used in super.setupLighting() so we temporarily replace it\n    let tempEmissiveNode: ShaderNodeObject<THREE.Node> | null = null;\n\n    if (this.emissiveNode == null) {\n      tempEmissiveNode = refEmissive.mul(refEmissiveIntensity);\n\n      if (this.emissiveMap && this.emissiveMap.isTexture === true) {\n        const map = refEmissiveMap.context({ getUV: () => this._animatedUVNode });\n        tempEmissiveNode = tempEmissiveNode.mul(map);\n      }\n\n      this.emissiveNode = tempEmissiveNode;\n    }\n\n    // the ordinary lighting setup\n    const ret = super.setupLighting(builder);\n\n    // revert the emissiveNode\n    if (this.emissiveNode === tempEmissiveNode) {\n      this.emissiveNode = null;\n    }\n\n    return ret;\n  }\n\n  public setupOutput(\n    builder: THREE.NodeBuilder,\n    outputNode: ShaderNodeObject<THREE.Node>,\n  ): ShaderNodeObject<THREE.Node> {\n    // mix or set outline color\n    if (this.isOutline && this.outlineWidthMode !== MToonMaterialOutlineWidthMode.None) {\n      outputNode = vec4(\n        mix(refOutlineColorFactor, outputNode.xyz.mul(refOutlineColorFactor), refOutlineLightingMixFactor),\n        outputNode.w,\n      );\n    }\n\n    // the ordinary output setup\n    return super.setupOutput(builder, outputNode) as ShaderNodeObject<THREE.Node>;\n  }\n\n  public setupPosition(builder: THREE.NodeBuilder): ShaderNodeObject<THREE.Node> {\n    // we must apply outline position offset\n    // this.positionNode will be used in super.setupPosition() so we temporarily replace it\n    const tempPositionNode = this.positionNode;\n\n    if (this.isOutline && this.outlineWidthMode !== MToonMaterialOutlineWidthMode.None) {\n      this.positionNode ??= positionLocal;\n\n      const normalLocalNormalized = normalLocal.normalize();\n\n      let width: ShaderNodeObject<THREE.Node> = refOutlineWidthFactor;\n\n      if (this.outlineWidthMultiplyTexture && this.outlineWidthMultiplyTexture.isTexture === true) {\n        const map = refOutlineWidthMultiplyTexture.context({ getUV: () => this._animatedUVNode });\n        width = width.mul(map);\n      }\n\n      const worldNormalLength = length(modelNormalMatrix.mul(normalLocalNormalized));\n      const outlineOffset = width.mul(worldNormalLength).mul(normalLocalNormalized);\n\n      if (this.outlineWidthMode === MToonMaterialOutlineWidthMode.WorldCoordinates) {\n        // See about the type assertion: https://github.com/three-types/three-ts-types/pull/1123\n        this.positionNode = (this.positionNode as ShaderNodeObject<THREE.Node>).add(outlineOffset);\n      } else if (this.outlineWidthMode === MToonMaterialOutlineWidthMode.ScreenCoordinates) {\n        const clipScale = cameraProjectionMatrix.element(1).element(1);\n\n        // We can't use `positionView` in `setupPosition`\n        // because using `positionView` here will make it calculate the `positionView` earlier\n        // and it won't be calculated again after setting the `positionNode`\n        const tempPositionView = modelViewMatrix.mul(positionLocal);\n\n        // See about the type assertion: https://github.com/three-types/three-ts-types/pull/1123\n        this.positionNode = (this.positionNode as ShaderNodeObject<THREE.Node>).add(\n          outlineOffset.div(clipScale).mul(tempPositionView.z.negate()),\n        );\n      }\n\n      this.positionNode ??= positionLocal;\n    }\n\n    // the ordinary position setup\n    const ret = super.setupPosition(builder) as ShaderNodeObject<THREE.Node>;\n\n    // anti z-fighting\n    // TODO: We might want to address this via glPolygonOffset instead?\n    ret.z.add(ret.w.mul(1e-6));\n\n    // revert the positionNode\n    this.positionNode = tempPositionNode;\n\n    return ret;\n  }\n\n  public copy(source: MToonNodeMaterial): this {\n    this.color.copy(source.color);\n    this.map = source.map ?? null;\n    this.emissive.copy(source.emissive);\n    this.emissiveIntensity = source.emissiveIntensity;\n    this.emissiveMap = source.emissiveMap ?? null;\n    this.normalMap = source.normalMap ?? null;\n    this.normalScale.copy(source.normalScale);\n\n    this.shadeColorFactor.copy(source.shadeColorFactor);\n    this.shadeMultiplyTexture = source.shadeMultiplyTexture ?? null;\n    this.shadingShiftFactor = source.shadingShiftFactor;\n    this.shadingShiftTexture = source.shadingShiftTexture ?? null;\n    this.shadingShiftTextureScale = source.shadingShiftTextureScale;\n    this.shadingToonyFactor = source.shadingToonyFactor;\n    this.rimLightingMixFactor = source.rimLightingMixFactor;\n    this.rimMultiplyTexture = source.rimMultiplyTexture ?? null;\n    this.matcapFactor.copy(source.matcapFactor);\n    this.matcapTexture = source.matcapTexture ?? null;\n    this.parametricRimColorFactor.copy(source.parametricRimColorFactor);\n    this.parametricRimLiftFactor = source.parametricRimLiftFactor;\n    this.parametricRimFresnelPowerFactor = source.parametricRimFresnelPowerFactor;\n    this.outlineWidthMode = source.outlineWidthMode;\n    this.outlineWidthMultiplyTexture = source.outlineWidthMultiplyTexture ?? null;\n    this.outlineWidthFactor = source.outlineWidthFactor;\n    this.outlineColorFactor.copy(source.outlineColorFactor);\n    this.outlineLightingMixFactor = source.outlineLightingMixFactor;\n    this.uvAnimationScrollXSpeedFactor = source.uvAnimationScrollXSpeedFactor;\n    this.uvAnimationScrollYSpeedFactor = source.uvAnimationScrollYSpeedFactor;\n    this.uvAnimationRotationSpeedFactor = source.uvAnimationRotationSpeedFactor;\n    this.uvAnimationMaskTexture = source.uvAnimationMaskTexture ?? null;\n\n    this.shadeColorNode = source.shadeColorNode ?? null;\n    this.shadingShiftNode = source.shadingShiftNode ?? null;\n    this.shadingToonyNode = source.shadingToonyNode ?? null;\n    this.rimLightingMixNode = source.rimLightingMixNode ?? null;\n    this.rimMultiplyNode = source.rimMultiplyNode ?? null;\n    this.matcapNode = source.matcapNode ?? null;\n    this.parametricRimColorNode = source.parametricRimColorNode ?? null;\n    this.parametricRimLiftNode = source.parametricRimLiftNode ?? null;\n    this.parametricRimFresnelPowerNode = source.parametricRimFresnelPowerNode ?? null;\n\n    this.isOutline = source.isOutline ?? null;\n\n    return super.copy(source);\n  }\n\n  public update(delta: number): void {\n    this.uvAnimationScrollXOffset += delta * this.uvAnimationScrollXSpeedFactor;\n    this.uvAnimationScrollYOffset += delta * this.uvAnimationScrollYSpeedFactor;\n    this.uvAnimationRotationPhase += delta * this.uvAnimationRotationSpeedFactor;\n  }\n\n  private _setupShadeColorNode(): Swizzable {\n    if (this.shadeColorNode != null) {\n      return vec3(this.shadeColorNode);\n    }\n\n    let shadeColorNode: ShaderNodeObject<THREE.Node> = refShadeColorFactor;\n\n    if (this.shadeMultiplyTexture && this.shadeMultiplyTexture.isTexture === true) {\n      const map = refShadeMultiplyTexture.context({ getUV: () => this._animatedUVNode });\n      shadeColorNode = shadeColorNode.mul(map);\n    }\n\n    return shadeColorNode;\n  }\n\n  private _setupShadingShiftNode(): THREE.Node {\n    if (this.shadingShiftNode != null) {\n      return float(this.shadingShiftNode);\n    }\n\n    let shadingShiftNode: ShaderNodeObject<THREE.Node> = refShadingShiftFactor;\n\n    if (this.shadingShiftTexture && this.shadingShiftTexture.isTexture === true) {\n      const map = refShadeMultiplyTexture.context({ getUV: () => this._animatedUVNode });\n      shadingShiftNode = shadingShiftNode.add(map.mul(refShadeMultiplyTextureScale));\n    }\n\n    return shadingShiftNode;\n  }\n\n  private _setupShadingToonyNode(): THREE.Node {\n    if (this.shadingToonyNode != null) {\n      return float(this.shadingToonyNode);\n    }\n\n    return refShadingToonyFactor;\n  }\n\n  private _setupRimLightingMixNode(): THREE.Node {\n    if (this.rimLightingMixNode != null) {\n      return float(this.rimLightingMixNode);\n    }\n\n    return refRimLightingMixFactor;\n  }\n\n  private _setupRimMultiplyNode(): Swizzable {\n    if (this.rimMultiplyNode != null) {\n      return vec3(this.rimMultiplyNode);\n    }\n\n    if (this.rimMultiplyTexture && this.rimMultiplyTexture.isTexture === true) {\n      const map = refRimMultiplyTexture.context({ getUV: () => this._animatedUVNode });\n      return map;\n    }\n\n    return vec3(1.0);\n  }\n\n  private _setupMatcapNode(): Swizzable {\n    if (this.matcapNode != null) {\n      return vec3(this.matcapNode);\n    }\n\n    if (this.matcapTexture && this.matcapTexture.isTexture === true) {\n      const map = refMatcapTexture.context({ getUV: () => matcapUV.mul(1.0, -1.0).add(0.0, 1.0) });\n      return map.mul(refMatcapFactor);\n    }\n\n    return vec3(0.0);\n  }\n\n  private _setupParametricRimNode(): Swizzable {\n    const parametricRimColor =\n      this.parametricRimColorNode != null ? vec3(this.parametricRimColorNode) : refParametricRimColorFactor;\n\n    const parametricRimLift =\n      this.parametricRimLiftNode != null ? float(this.parametricRimLiftNode) : refParametricRimLiftFactor;\n\n    const parametricRimFresnelPower =\n      this.parametricRimFresnelPowerNode != null\n        ? float(this.parametricRimFresnelPowerNode)\n        : refParametricRimFresnelPowerFactor;\n\n    return mtoonParametricRim({\n      parametricRimLift,\n      parametricRimFresnelPower,\n      parametricRimColor,\n    });\n  }\n}\n\n// TODO: Part of stuff that MToonMaterial depends on does not exist in three/webgpu (e.g. UniformsLib)\n// THREE.addNodeMaterial('MToonNodeMaterial', MToonNodeMaterial);\n", "/* eslint-disable @typescript-eslint/naming-convention */\n\nexport const MToonMaterialOutlineWidthMode = {\n  None: 'none',\n  WorldCoordinates: 'worldCoordinates',\n  ScreenCoordinates: 'screenCoordinates',\n} as const;\n\nexport type MToonMaterialOutlineWidthMode =\n  (typeof MToonMaterialOutlineWidthMode)[keyof typeof MToonMaterialOutlineWidthMode];\n", "import * as THREE from 'three/webgpu';\nimport { float, modelViewPosition, NodeRepresentation, transformedNormalView } from 'three/tsl';\nimport { FnCompat } from './utils/FnCompat';\n\nexport const mtoonParametricRim = FnCompat(\n  ({\n    parametricRimLift,\n    parametricRimFresnelPower,\n    parametricRimColor,\n  }: {\n    parametricRimLift: NodeRepresentation;\n    parametricRimFresnelPower: NodeRepresentation;\n    parametricRimColor: NodeRepresentation;\n  }) => {\n    const viewDir = modelViewPosition.normalize();\n    const dotNV = transformedNormalView.dot(viewDir.negate());\n\n    const rim = float(1.0).sub(dotNV).add(parametricRimLift).clamp().pow(parametricRimFresnelPower);\n\n    return rim.mul(parametricRimColor);\n  },\n);\n"],
  "mappings": "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",
  "names": ["threeRevision", "shadow", "context", "transformedNormalView", "float", "diffuseColor", "vec4", "mix", "vec3"]
}
